package fr.umlv.small.grammar.parser;

/** 
 *  This class is generated - please do not edit it 
 */
public enum ProductionEnum {
  member_star_0_empty,
member_star_0_rec,
script,
class_member,
function_member,
field_star_1_element,
field_star_1_rec,
field_star_1_empty,
field_star_1_through,
_class,
field,
id_star_2_element,
id_star_2_rec,
id_star_2_empty,
id_star_2_through,
instr_star_3_empty,
instr_star_3_rec,
function,
instr,
init,
instr_plus_4_element,
instr_plus_4_rec,
else_instrs,
else_expr,
else_empty,
expr_integer,
expr_bool,
expr_text,
expr_var_access,
expr_parens,
expr_var_assignment,
expr_field_access,
expr_star_5_element,
expr_star_5_rec,
expr_star_5_empty,
expr_star_5_through,
expr_function_call,
expr_star_6_element,
expr_star_6_rec,
expr_star_6_empty,
expr_star_6_through,
expr_method_call,
expr_method_assignment,
init_star_7_element,
init_star_7_rec,
init_star_7_empty,
init_star_7_through,
expr_allocation,
instr_plus_8_element,
instr_plus_8_rec,
expr_if,
expr_if_expr,
expr_unary_minus,
expr_unary_plus,
expr_unary_not,
expr_is,
expr_binary_add,
expr_binary_sub,
expr_binary_mul,
expr_binary_div,
expr_binary_mod,
expr_binary_eq,
expr_binary_ne,
expr_binary_lt,
expr_binary_le,
expr_binary_gt,
expr_binary_ge
;
}